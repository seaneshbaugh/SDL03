#!/usr/bin/env ruby

require 'json'
require 'colorize'

raise ArgumentError, 'map(s) file required' unless ARGV.length > 0

def colorize_number(n, highlight)
  return n.to_s.black.on_light_cyan.blink if highlight

  case n
  when 0
    '0'.white.on_yellow
  when 1
    '1'.white.on_blue
  when 2
    '2'.white.on_light_magenta
  when 3
    '3'.white.on_light_blue
  when 4
    '4'.light_blue.on_red
  else
    n.to_s
  end
end

map_file_path = ARGV[0]

layer_name = ARGV.length > 1 ? ARGV[1] : 'base_terrain'

map_file_contents = File.read(map_file_path)

map = JSON.parse!(map_file_contents)

layer = map['layers'].find { |layer| layer['name'] == layer_name }

raise ArgumentError, "layer #{layer_name} not found}" if layer.nil?

width = layer['width']
height = layer['height']

# Hardcode highlighted spot for now.
highlight_x = 15
highlight_y = 9
highlight_offset = (highlight_y * width) + highlight_x

puts layer['data']
  .each_slice(width)
  .map.with_index { |row, i| row.map.with_index { |n, j| colorize_number(n, (i * row.length) + j == highlight_offset) }.join(' ') }
  .join("\n")
